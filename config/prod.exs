use Mix.Config

# For production, don't forget to configure the url host
# to something meaningful, Phoenix uses this information
# when generating URLs.
#
# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
config :convenia_bot, CBWeb.Endpoint, url: [host: "convenia-bot.gigalixirapp.com/", port: 80]
# cache_static_manifest: "priv/static/cache_manifest.json"
# Do not print debug messages in production
config :logger, level: :info

## SSL Support

# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:

# config :convenia_bot, CBWeb.Endpoint,
#   url: [host: "", port: 443],
#   https: [
#     port: 443,
#     cipher_suite: :strong,
#     keyfile: "~/convenia-bot/cert/privkey.pem", # System.get_env("SOME_APP_SSL_KEY_PATH"),
#     certfile: "~/convenia-bot/cert/certfile.pem", #System.get_env("SOME_APP_SSL_CERT_PATH"),
#     transport_options: [socket_opts: [:inet6]]
#   ]
#
# The `cipher_suite` is set to `:strong` to support only the
# latest and more secure SSL ciphers. This means old browsers
# and clients may not be supported. You can set it to
# `:compatible` for wider support.
#
# `:keyfile` and `:certfile` expect an absolute path to the key
# and cert in disk or a relative path inside priv, for example
# "priv/ssl/server.key". For all supported SSL configuration
# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
#
# We also recommend setting `force_ssl` in your endpoint, ensuring
# no data is ever sent via http, always redirecting to https:
#
#     config :convenia_bot, CBWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# Finally import the config/prod.secret.exs which loads secrets
# and configuration from environment variables.

secret_key_base =
  System.get_env("SECRET_KEY_BASE") ||
    raise """
    environment variable SECRET_KEY_BASE is missing.
    You can generate one by calling: mix phx.gen.secret
    """

config :convenia_bot, CBWeb.Endpoint,
  http: [
    port: String.to_integer(System.get_env("PORT") || "4000"),
    transport_options: [socket_opts: [:inet6]]
  ],
  secret_key_base: secret_key_base

# ## Using releases (Elixir v1.9+)
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start each relevant endpoint:
#
#     config :convenia_bot, CBWeb.Endpoint, server: true
#
# Then you can assemble a release by calling `mix release`.
# See `mix help release` for more information.

config :convenia_bot,
       :slack_url,
       System.get_env("SLACK_URL") ||
         raise("""
         environment variable SLACK_URL is missing.
         """)

config :convenia_bot,
       :infra_interna_slack_url,
       System.get_env("INFRA_INTERNA_SLACK_URL") ||
         raise("""
         environment variable INFRA_INTERNA_SLACK_URL is missing.
         """)

config :convenia_bot,
      :comms_slack_url,
      System.get_env("COMMS_SLACK_URL") ||
        raise("""
        environment variable COMMS_SLACK_URL is missing.
        """)

config :convenia_bot,
       :convenia_token,
       System.get_env("CONVENIA_TOKEN") ||
         raise("""
         environment variable CONVENIA_TOKEN is missing.
         """)

config :convenia_bot,
       :secret_user,
       System.get_env("SECRET_USER") ||
         raise("""
         environment variable SECRET_USER is missing.
         """)

config :convenia_bot,
       :secret_pass,
       System.get_env("SECRET_PASS") ||
         raise("""
         environment variable SECRET_PASS is missing.
         """)
